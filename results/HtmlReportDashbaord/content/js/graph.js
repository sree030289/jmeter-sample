/*
   Licensed to the Apache Software Foundation (ASF) under one or more
   contributor license agreements.  See the NOTICE file distributed with
   this work for additional information regarding copyright ownership.
   The ASF licenses this file to You under the Apache License, Version 2.0
   (the "License"); you may not use this file except in compliance with
   the License.  You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
*/
$(document).ready(function() {

    $(".click-title").mouseenter( function(    e){
        e.preventDefault();
        this.style.cursor="pointer";
    });
    $(".click-title").mousedown( function(event){
        event.preventDefault();
    });

    // Ugly code while this script is shared among several pages
    try{
        refreshHitsPerSecond(true);
    } catch(e){}
    try{
        refreshResponseTimeOverTime(true);
    } catch(e){}
    try{
        refreshResponseTimePercentiles();
    } catch(e){}
});


var responseTimePercentilesInfos = {
        data: {"result": {"minY": 784.0, "minX": 0.0, "maxY": 14557.0, "series": [{"data": [[0.0, 784.0], [0.1, 785.0], [0.2, 786.0], [0.3, 786.0], [0.4, 790.0], [0.5, 790.0], [0.6, 790.0], [0.7, 790.0], [0.8, 792.0], [0.9, 794.0], [1.0, 794.0], [1.1, 794.0], [1.2, 796.0], [1.3, 796.0], [1.4, 799.0], [1.5, 800.0], [1.6, 800.0], [1.7, 802.0], [1.8, 803.0], [1.9, 803.0], [2.0, 803.0], [2.1, 803.0], [2.2, 804.0], [2.3, 804.0], [2.4, 805.0], [2.5, 805.0], [2.6, 809.0], [2.7, 812.0], [2.8, 814.0], [2.9, 814.0], [3.0, 820.0], [3.1, 820.0], [3.2, 822.0], [3.3, 828.0], [3.4, 829.0], [3.5, 831.0], [3.6, 832.0], [3.7, 836.0], [3.8, 846.0], [3.9, 852.0], [4.0, 855.0], [4.1, 864.0], [4.2, 875.0], [4.3, 877.0], [4.4, 877.0], [4.5, 877.0], [4.6, 898.0], [4.7, 934.0], [4.8, 936.0], [4.9, 950.0], [5.0, 967.0], [5.1, 998.0], [5.2, 1016.0], [5.3, 1021.0], [5.4, 1048.0], [5.5, 1072.0], [5.6, 1077.0], [5.7, 1093.0], [5.8, 1114.0], [5.9, 1125.0], [6.0, 1127.0], [6.1, 1140.0], [6.2, 1140.0], [6.3, 1144.0], [6.4, 1145.0], [6.5, 1146.0], [6.6, 1148.0], [6.7, 1150.0], [6.8, 1160.0], [6.9, 1168.0], [7.0, 1169.0], [7.1, 1170.0], [7.2, 1178.0], [7.3, 1179.0], [7.4, 1182.0], [7.5, 1189.0], [7.6, 1197.0], [7.7, 1201.0], [7.8, 1202.0], [7.9, 1203.0], [8.0, 1205.0], [8.1, 1206.0], [8.2, 1207.0], [8.3, 1215.0], [8.4, 1216.0], [8.5, 1217.0], [8.6, 1218.0], [8.7, 1221.0], [8.8, 1226.0], [8.9, 1236.0], [9.0, 1239.0], [9.1, 1245.0], [9.2, 1268.0], [9.3, 1269.0], [9.4, 1275.0], [9.5, 1285.0], [9.6, 1291.0], [9.7, 1292.0], [9.8, 1307.0], [9.9, 1313.0], [10.0, 1314.0], [10.1, 1321.0], [10.2, 1328.0], [10.3, 1339.0], [10.4, 1350.0], [10.5, 1362.0], [10.6, 1368.0], [10.7, 1372.0], [10.8, 1386.0], [10.9, 1394.0], [11.0, 1397.0], [11.1, 1404.0], [11.2, 1406.0], [11.3, 1408.0], [11.4, 1409.0], [11.5, 1411.0], [11.6, 1412.0], [11.7, 1413.0], [11.8, 1424.0], [11.9, 1435.0], [12.0, 1436.0], [12.1, 1439.0], [12.2, 1449.0], [12.3, 1452.0], [12.4, 1455.0], [12.5, 1465.0], [12.6, 1479.0], [12.7, 1487.0], [12.8, 1488.0], [12.9, 1491.0], [13.0, 1493.0], [13.1, 1493.0], [13.2, 1496.0], [13.3, 1496.0], [13.4, 1508.0], [13.5, 1517.0], [13.6, 1525.0], [13.7, 1530.0], [13.8, 1531.0], [13.9, 1538.0], [14.0, 1551.0], [14.1, 1552.0], [14.2, 1556.0], [14.3, 1558.0], [14.4, 1561.0], [14.5, 1582.0], [14.6, 1590.0], [14.7, 1607.0], [14.8, 1615.0], [14.9, 1626.0], [15.0, 1634.0], [15.1, 1636.0], [15.2, 1637.0], [15.3, 1638.0], [15.4, 1639.0], [15.5, 1641.0], [15.6, 1644.0], [15.7, 1646.0], [15.8, 1652.0], [15.9, 1661.0], [16.0, 1662.0], [16.1, 1662.0], [16.2, 1665.0], [16.3, 1665.0], [16.4, 1676.0], [16.5, 1677.0], [16.6, 1689.0], [16.7, 1690.0], [16.8, 1690.0], [16.9, 1699.0], [17.0, 1705.0], [17.1, 1708.0], [17.2, 1710.0], [17.3, 1711.0], [17.4, 1713.0], [17.5, 1714.0], [17.6, 1726.0], [17.7, 1727.0], [17.8, 1730.0], [17.9, 1731.0], [18.0, 1737.0], [18.1, 1739.0], [18.2, 1742.0], [18.3, 1744.0], [18.4, 1750.0], [18.5, 1754.0], [18.6, 1758.0], [18.7, 1760.0], [18.8, 1762.0], [18.9, 1766.0], [19.0, 1767.0], [19.1, 1767.0], [19.2, 1770.0], [19.3, 1771.0], [19.4, 1776.0], [19.5, 1778.0], [19.6, 1782.0], [19.7, 1793.0], [19.8, 1797.0], [19.9, 1797.0], [20.0, 1802.0], [20.1, 1804.0], [20.2, 1805.0], [20.3, 1805.0], [20.4, 1806.0], [20.5, 1813.0], [20.6, 1818.0], [20.7, 1826.0], [20.8, 1830.0], [20.9, 1839.0], [21.0, 1842.0], [21.1, 1842.0], [21.2, 1844.0], [21.3, 1845.0], [21.4, 1862.0], [21.5, 1864.0], [21.6, 1885.0], [21.7, 1898.0], [21.8, 1921.0], [21.9, 1922.0], [22.0, 1922.0], [22.1, 1924.0], [22.2, 1937.0], [22.3, 1949.0], [22.4, 1962.0], [22.5, 2003.0], [22.6, 2006.0], [22.7, 2019.0], [22.8, 2030.0], [22.9, 2050.0], [23.0, 2066.0], [23.1, 2069.0], [23.2, 2081.0], [23.3, 2089.0], [23.4, 2118.0], [23.5, 2125.0], [23.6, 2142.0], [23.7, 2145.0], [23.8, 2149.0], [23.9, 2160.0], [24.0, 2163.0], [24.1, 2163.0], [24.2, 2169.0], [24.3, 2179.0], [24.4, 2188.0], [24.5, 2203.0], [24.6, 2223.0], [24.7, 2224.0], [24.8, 2228.0], [24.9, 2229.0], [25.0, 2235.0], [25.1, 2240.0], [25.2, 2240.0], [25.3, 2273.0], [25.4, 2274.0], [25.5, 2295.0], [25.6, 2299.0], [25.7, 2306.0], [25.8, 2306.0], [25.9, 2311.0], [26.0, 2312.0], [26.1, 2313.0], [26.2, 2317.0], [26.3, 2330.0], [26.4, 2331.0], [26.5, 2336.0], [26.6, 2341.0], [26.7, 2347.0], [26.8, 2357.0], [26.9, 2365.0], [27.0, 2367.0], [27.1, 2370.0], [27.2, 2391.0], [27.3, 2397.0], [27.4, 2401.0], [27.5, 2422.0], [27.6, 2427.0], [27.7, 2440.0], [27.8, 2441.0], [27.9, 2449.0], [28.0, 2454.0], [28.1, 2459.0], [28.2, 2460.0], [28.3, 2461.0], [28.4, 2469.0], [28.5, 2474.0], [28.6, 2480.0], [28.7, 2485.0], [28.8, 2485.0], [28.9, 2487.0], [29.0, 2491.0], [29.1, 2500.0], [29.2, 2502.0], [29.3, 2504.0], [29.4, 2507.0], [29.5, 2515.0], [29.6, 2516.0], [29.7, 2521.0], [29.8, 2530.0], [29.9, 2531.0], [30.0, 2537.0], [30.1, 2545.0], [30.2, 2548.0], [30.3, 2558.0], [30.4, 2570.0], [30.5, 2571.0], [30.6, 2575.0], [30.7, 2578.0], [30.8, 2585.0], [30.9, 2585.0], [31.0, 2594.0], [31.1, 2599.0], [31.2, 2608.0], [31.3, 2619.0], [31.4, 2623.0], [31.5, 2644.0], [31.6, 2645.0], [31.7, 2650.0], [31.8, 2651.0], [31.9, 2659.0], [32.0, 2663.0], [32.1, 2669.0], [32.2, 2670.0], [32.3, 2676.0], [32.4, 2682.0], [32.5, 2685.0], [32.6, 2685.0], [32.7, 2690.0], [32.8, 2694.0], [32.9, 2703.0], [33.0, 2712.0], [33.1, 2712.0], [33.2, 2713.0], [33.3, 2714.0], [33.4, 2717.0], [33.5, 2726.0], [33.6, 2727.0], [33.7, 2734.0], [33.8, 2740.0], [33.9, 2751.0], [34.0, 2753.0], [34.1, 2754.0], [34.2, 2756.0], [34.3, 2777.0], [34.4, 2777.0], [34.5, 2781.0], [34.6, 2786.0], [34.7, 2788.0], [34.8, 2789.0], [34.9, 2790.0], [35.0, 2805.0], [35.1, 2811.0], [35.2, 2828.0], [35.3, 2830.0], [35.4, 2838.0], [35.5, 2841.0], [35.6, 2843.0], [35.7, 2860.0], [35.8, 2869.0], [35.9, 2875.0], [36.0, 2881.0], [36.1, 2905.0], [36.2, 2923.0], [36.3, 2940.0], [36.4, 2944.0], [36.5, 2946.0], [36.6, 2952.0], [36.7, 2974.0], [36.8, 2977.0], [36.9, 3002.0], [37.0, 3004.0], [37.1, 3014.0], [37.2, 3027.0], [37.3, 3032.0], [37.4, 3039.0], [37.5, 3062.0], [37.6, 3064.0], [37.7, 3075.0], [37.8, 3078.0], [37.9, 3091.0], [38.0, 3099.0], [38.1, 3113.0], [38.2, 3122.0], [38.3, 3130.0], [38.4, 3136.0], [38.5, 3152.0], [38.6, 3153.0], [38.7, 3156.0], [38.8, 3180.0], [38.9, 3186.0], [39.0, 3191.0], [39.1, 3207.0], [39.2, 3213.0], [39.3, 3236.0], [39.4, 3237.0], [39.5, 3238.0], [39.6, 3260.0], [39.7, 3271.0], [39.8, 3285.0], [39.9, 3290.0], [40.0, 3291.0], [40.1, 3302.0], [40.2, 3315.0], [40.3, 3317.0], [40.4, 3327.0], [40.5, 3343.0], [40.6, 3349.0], [40.7, 3372.0], [40.8, 3374.0], [40.9, 3402.0], [41.0, 3414.0], [41.1, 3415.0], [41.2, 3431.0], [41.3, 3431.0], [41.4, 3434.0], [41.5, 3440.0], [41.6, 3455.0], [41.7, 3456.0], [41.8, 3459.0], [41.9, 3462.0], [42.0, 3464.0], [42.1, 3467.0], [42.2, 3473.0], [42.3, 3503.0], [42.4, 3503.0], [42.5, 3523.0], [42.6, 3531.0], [42.7, 3574.0], [42.8, 3585.0], [42.9, 3592.0], [43.0, 3607.0], [43.1, 3628.0], [43.2, 3658.0], [43.3, 3662.0], [43.4, 3688.0], [43.5, 3692.0], [43.6, 3707.0], [43.7, 3732.0], [43.8, 3738.0], [43.9, 3739.0], [44.0, 3743.0], [44.1, 3772.0], [44.2, 3783.0], [44.3, 3785.0], [44.4, 3812.0], [44.5, 3826.0], [44.6, 3837.0], [44.7, 3869.0], [44.8, 3879.0], [44.9, 3882.0], [45.0, 3906.0], [45.1, 3917.0], [45.2, 3922.0], [45.3, 3925.0], [45.4, 3926.0], [45.5, 3954.0], [45.6, 3967.0], [45.7, 3985.0], [45.8, 3986.0], [45.9, 4025.0], [46.0, 4031.0], [46.1, 4032.0], [46.2, 4047.0], [46.3, 4053.0], [46.4, 4065.0], [46.5, 4094.0], [46.6, 4105.0], [46.7, 4110.0], [46.8, 4111.0], [46.9, 4125.0], [47.0, 4126.0], [47.1, 4145.0], [47.2, 4164.0], [47.3, 4167.0], [47.4, 4167.0], [47.5, 4179.0], [47.6, 4205.0], [47.7, 4215.0], [47.8, 4224.0], [47.9, 4237.0], [48.0, 4240.0], [48.1, 4241.0], [48.2, 4242.0], [48.3, 4247.0], [48.4, 4249.0], [48.5, 4250.0], [48.6, 4253.0], [48.7, 4253.0], [48.8, 4261.0], [48.9, 4263.0], [49.0, 4268.0], [49.1, 4269.0], [49.2, 4270.0], [49.3, 4272.0], [49.4, 4275.0], [49.5, 4277.0], [49.6, 4290.0], [49.7, 4297.0], [49.8, 4304.0], [49.9, 4307.0], [50.0, 4310.0], [50.1, 4318.0], [50.2, 4329.0], [50.3, 4333.0], [50.4, 4341.0], [50.5, 4342.0], [50.6, 4359.0], [50.7, 4378.0], [50.8, 4382.0], [50.9, 4385.0], [51.0, 4396.0], [51.1, 4402.0], [51.2, 4415.0], [51.3, 4431.0], [51.4, 4441.0], [51.5, 4443.0], [51.6, 4457.0], [51.7, 4488.0], [51.8, 4529.0], [51.9, 4545.0], [52.0, 4573.0], [52.1, 4597.0], [52.2, 4613.0], [52.3, 4617.0], [52.4, 4625.0], [52.5, 4654.0], [52.6, 4682.0], [52.7, 4688.0], [52.8, 4697.0], [52.9, 4708.0], [53.0, 4709.0], [53.1, 4710.0], [53.2, 4710.0], [53.3, 4717.0], [53.4, 4749.0], [53.5, 4775.0], [53.6, 4789.0], [53.7, 4793.0], [53.8, 4795.0], [53.9, 4814.0], [54.0, 4818.0], [54.1, 4825.0], [54.2, 4850.0], [54.3, 4854.0], [54.4, 4854.0], [54.5, 4857.0], [54.6, 4881.0], [54.7, 4904.0], [54.8, 4910.0], [54.9, 4930.0], [55.0, 4964.0], [55.1, 4984.0], [55.2, 4986.0], [55.3, 4993.0], [55.4, 5008.0], [55.5, 5010.0], [55.6, 5010.0], [55.7, 5025.0], [55.8, 5038.0], [55.9, 5066.0], [56.0, 5077.0], [56.1, 5077.0], [56.2, 5083.0], [56.3, 5112.0], [56.4, 5121.0], [56.5, 5145.0], [56.6, 5158.0], [56.7, 5177.0], [56.8, 5193.0], [56.9, 5205.0], [57.0, 5210.0], [57.1, 5211.0], [57.2, 5217.0], [57.3, 5231.0], [57.4, 5253.0], [57.5, 5273.0], [57.6, 5280.0], [57.7, 5308.0], [57.8, 5312.0], [57.9, 5312.0], [58.0, 5315.0], [58.1, 5321.0], [58.2, 5351.0], [58.3, 5355.0], [58.4, 5377.0], [58.5, 5398.0], [58.6, 5410.0], [58.7, 5443.0], [58.8, 5461.0], [58.9, 5461.0], [59.0, 5475.0], [59.1, 5503.0], [59.2, 5509.0], [59.3, 5514.0], [59.4, 5539.0], [59.5, 5540.0], [59.6, 5544.0], [59.7, 5561.0], [59.8, 5569.0], [59.9, 5595.0], [60.0, 5608.0], [60.1, 5612.0], [60.2, 5648.0], [60.3, 5667.0], [60.4, 5668.0], [60.5, 5690.0], [60.6, 5698.0], [60.7, 5714.0], [60.8, 5738.0], [60.9, 5743.0], [61.0, 5768.0], [61.1, 5770.0], [61.2, 5778.0], [61.3, 5790.0], [61.4, 5790.0], [61.5, 5839.0], [61.6, 5867.0], [61.7, 5869.0], [61.8, 5877.0], [61.9, 5890.0], [62.0, 5928.0], [62.1, 5961.0], [62.2, 5998.0], [62.3, 6073.0], [62.4, 6100.0], [62.5, 6126.0], [62.6, 6177.0], [62.7, 6181.0], [62.8, 6186.0], [62.9, 6198.0], [63.0, 6210.0], [63.1, 6230.0], [63.2, 6239.0], [63.3, 6253.0], [63.4, 6309.0], [63.5, 6310.0], [63.6, 6316.0], [63.7, 6321.0], [63.8, 6347.0], [63.9, 6401.0], [64.0, 6404.0], [64.1, 6404.0], [64.2, 6410.0], [64.3, 6411.0], [64.4, 6420.0], [64.5, 6460.0], [64.6, 6468.0], [64.7, 6478.0], [64.8, 6484.0], [64.9, 6537.0], [65.0, 6601.0], [65.1, 6609.0], [65.2, 6679.0], [65.3, 6738.0], [65.4, 6740.0], [65.5, 6741.0], [65.6, 6777.0], [65.7, 6795.0], [65.8, 6802.0], [65.9, 6826.0], [66.0, 6834.0], [66.1, 6850.0], [66.2, 6884.0], [66.3, 6892.0], [66.4, 6892.0], [66.5, 6905.0], [66.6, 6909.0], [66.7, 6916.0], [66.8, 6922.0], [66.9, 6958.0], [67.0, 6965.0], [67.1, 7004.0], [67.2, 7022.0], [67.3, 7054.0], [67.4, 7058.0], [67.5, 7078.0], [67.6, 7083.0], [67.7, 7126.0], [67.8, 7171.0], [67.9, 7219.0], [68.0, 7236.0], [68.1, 7271.0], [68.2, 7288.0], [68.3, 7296.0], [68.4, 7336.0], [68.5, 7385.0], [68.6, 7391.0], [68.7, 7418.0], [68.8, 7454.0], [68.9, 7464.0], [69.0, 7487.0], [69.1, 7505.0], [69.2, 7516.0], [69.3, 7517.0], [69.4, 7544.0], [69.5, 7578.0], [69.6, 7629.0], [69.7, 7633.0], [69.8, 7653.0], [69.9, 7656.0], [70.0, 7658.0], [70.1, 7665.0], [70.2, 7671.0], [70.3, 7673.0], [70.4, 7680.0], [70.5, 7704.0], [70.6, 7705.0], [70.7, 7716.0], [70.8, 7717.0], [70.9, 7717.0], [71.0, 7728.0], [71.1, 7734.0], [71.2, 7739.0], [71.3, 7741.0], [71.4, 7743.0], [71.5, 7744.0], [71.6, 7747.0], [71.7, 7767.0], [71.8, 7784.0], [71.9, 7797.0], [72.0, 7824.0], [72.1, 7832.0], [72.2, 7844.0], [72.3, 7846.0], [72.4, 7846.0], [72.5, 7860.0], [72.6, 7871.0], [72.7, 7871.0], [72.8, 7888.0], [72.9, 7912.0], [73.0, 7922.0], [73.1, 7922.0], [73.2, 7937.0], [73.3, 7945.0], [73.4, 7950.0], [73.5, 7964.0], [73.6, 7964.0], [73.7, 8038.0], [73.8, 8060.0], [73.9, 8073.0], [74.0, 8091.0], [74.1, 8157.0], [74.2, 8166.0], [74.3, 8169.0], [74.4, 8184.0], [74.5, 8231.0], [74.6, 8265.0], [74.7, 8300.0], [74.8, 8308.0], [74.9, 8326.0], [75.0, 8358.0], [75.1, 8489.0], [75.2, 8548.0], [75.3, 8554.0], [75.4, 8640.0], [75.5, 8680.0], [75.6, 8932.0], [75.7, 8959.0], [75.8, 8971.0], [75.9, 9013.0], [76.0, 9044.0], [76.1, 9044.0], [76.2, 9054.0], [76.3, 9068.0], [76.4, 9079.0], [76.5, 9101.0], [76.6, 9102.0], [76.7, 9109.0], [76.8, 9132.0], [76.9, 9140.0], [77.0, 9179.0], [77.1, 9179.0], [77.2, 9224.0], [77.3, 9227.0], [77.4, 9239.0], [77.5, 9269.0], [77.6, 9295.0], [77.7, 9314.0], [77.8, 9369.0], [77.9, 9413.0], [78.0, 9414.0], [78.1, 9445.0], [78.2, 9461.0], [78.3, 9469.0], [78.4, 9475.0], [78.5, 9508.0], [78.6, 9508.0], [78.7, 9509.0], [78.8, 9525.0], [78.9, 9546.0], [79.0, 9592.0], [79.1, 9594.0], [79.2, 9598.0], [79.3, 9611.0], [79.4, 9624.0], [79.5, 9624.0], [79.6, 9641.0], [79.7, 9658.0], [79.8, 9665.0], [79.9, 9666.0], [80.0, 9671.0], [80.1, 9680.0], [80.2, 9702.0], [80.3, 9702.0], [80.4, 9717.0], [80.5, 9718.0], [80.6, 9733.0], [80.7, 9737.0], [80.8, 9743.0], [80.9, 9747.0], [81.0, 9757.0], [81.1, 9774.0], [81.2, 9782.0], [81.3, 9799.0], [81.4, 9826.0], [81.5, 9846.0], [81.6, 9847.0], [81.7, 9849.0], [81.8, 9879.0], [81.9, 9886.0], [82.0, 9898.0], [82.1, 9904.0], [82.2, 9922.0], [82.3, 9961.0], [82.4, 9965.0], [82.5, 9976.0], [82.6, 10006.0], [82.7, 10010.0], [82.8, 10014.0], [82.9, 10021.0], [83.0, 10032.0], [83.1, 10052.0], [83.2, 10055.0], [83.3, 10056.0], [83.4, 10086.0], [83.5, 10088.0], [83.6, 10096.0], [83.7, 10142.0], [83.8, 10146.0], [83.9, 10147.0], [84.0, 10149.0], [84.1, 10171.0], [84.2, 10186.0], [84.3, 10196.0], [84.4, 10199.0], [84.5, 10225.0], [84.6, 10235.0], [84.7, 10235.0], [84.8, 10245.0], [84.9, 10248.0], [85.0, 10260.0], [85.1, 10271.0], [85.2, 10272.0], [85.3, 10274.0], [85.4, 10286.0], [85.5, 10309.0], [85.6, 10311.0], [85.7, 10319.0], [85.8, 10374.0], [85.9, 10391.0], [86.0, 10401.0], [86.1, 10426.0], [86.2, 10427.0], [86.3, 10429.0], [86.4, 10435.0], [86.5, 10443.0], [86.6, 10503.0], [86.7, 10510.0], [86.8, 10513.0], [86.9, 10523.0], [87.0, 10528.0], [87.1, 10540.0], [87.2, 10542.0], [87.3, 10545.0], [87.4, 10547.0], [87.5, 10553.0], [87.6, 10568.0], [87.7, 10577.0], [87.8, 10577.0], [87.9, 10585.0], [88.0, 10589.0], [88.1, 10590.0], [88.2, 10594.0], [88.3, 10597.0], [88.4, 10600.0], [88.5, 10609.0], [88.6, 10610.0], [88.7, 10613.0], [88.8, 10617.0], [88.9, 10619.0], [89.0, 10620.0], [89.1, 10620.0], [89.2, 10623.0], [89.3, 10624.0], [89.4, 10627.0], [89.5, 10628.0], [89.6, 10630.0], [89.7, 10630.0], [89.8, 10633.0], [89.9, 10634.0], [90.0, 10639.0], [90.1, 10646.0], [90.2, 10647.0], [90.3, 10648.0], [90.4, 10651.0], [90.5, 10653.0], [90.6, 10653.0], [90.7, 10657.0], [90.8, 10657.0], [90.9, 10659.0], [91.0, 10665.0], [91.1, 10665.0], [91.2, 10678.0], [91.3, 10680.0], [91.4, 10688.0], [91.5, 10691.0], [91.6, 10696.0], [91.7, 10707.0], [91.8, 10715.0], [91.9, 10733.0], [92.0, 10750.0], [92.1, 10751.0], [92.2, 10755.0], [92.3, 10775.0], [92.4, 10784.0], [92.5, 10860.0], [92.6, 10865.0], [92.7, 10876.0], [92.8, 10931.0], [92.9, 10932.0], [93.0, 10953.0], [93.1, 10954.0], [93.2, 10958.0], [93.3, 10958.0], [93.4, 10960.0], [93.5, 10966.0], [93.6, 10978.0], [93.7, 10984.0], [93.8, 10992.0], [93.9, 10993.0], [94.0, 10998.0], [94.1, 11013.0], [94.2, 11024.0], [94.3, 11029.0], [94.4, 11032.0], [94.5, 11059.0], [94.6, 11065.0], [94.7, 11085.0], [94.8, 11089.0], [94.9, 11090.0], [95.0, 11094.0], [95.1, 11121.0], [95.2, 11126.0], [95.3, 11131.0], [95.4, 11131.0], [95.5, 11134.0], [95.6, 11142.0], [95.7, 11143.0], [95.8, 11145.0], [95.9, 11145.0], [96.0, 11150.0], [96.1, 11154.0], [96.2, 11155.0], [96.3, 11158.0], [96.4, 11161.0], [96.5, 11163.0], [96.6, 11168.0], [96.7, 11181.0], [96.8, 11183.0], [96.9, 11186.0], [97.0, 11198.0], [97.1, 11208.0], [97.2, 11244.0], [97.3, 11260.0], [97.4, 11262.0], [97.5, 11272.0], [97.6, 11397.0], [97.7, 11474.0], [97.8, 11515.0], [97.9, 11661.0], [98.0, 11669.0], [98.1, 11712.0], [98.2, 11716.0], [98.3, 11732.0], [98.4, 11747.0], [98.5, 11863.0], [98.6, 11887.0], [98.7, 11894.0], [98.8, 11999.0], [98.9, 12093.0], [99.0, 12110.0], [99.1, 12146.0], [99.2, 12200.0], [99.3, 12230.0], [99.4, 12286.0], [99.5, 12292.0], [99.6, 12696.0], [99.7, 12779.0], [99.8, 12830.0], [99.9, 14557.0]], "isOverall": false, "label": "HomePageHttpLoadRequest", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 100.0, "title": "Response Time Percentiles"}},
        getOptions: function() {
            return {
                series: {
                    points: { show: false }
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentiles'
                },
                xaxis: {
                    tickDecimals: 1,
                    axisLabel: "Percentiles",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Percentile value in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : %x.2 percentile was %y ms"
                },
                selection: { mode: "xy" },
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentiles"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesPercentiles"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesPercentiles"), dataset, prepareOverviewOptions(options));
        }
};

/**
 * @param elementId Id of element where we display message
 */
function setEmptyGraph(elementId) {
    $(function() {
        $(elementId).text("No graph series with filter="+seriesFilter);
    });
}

// Response times percentiles
function refreshResponseTimePercentiles() {
    var infos = responseTimePercentilesInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimePercentiles");
        return;
    }
    if (isGraph($("#flotResponseTimesPercentiles"))){
        infos.createGraph();
    } else {
        var choiceContainer = $("#choicesResponseTimePercentiles");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesPercentiles", "#overviewResponseTimesPercentiles");
        $('#bodyResponseTimePercentiles .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimeDistributionInfos = {
        data: {"result": {"minY": 1.0, "minX": 700.0, "maxY": 33.0, "series": [{"data": [[700.0, 15.0], [800.0, 31.0], [900.0, 6.0], [1000.0, 6.0], [1100.0, 19.0], [1200.0, 21.0], [1300.0, 13.0], [1400.0, 23.0], [1500.0, 13.0], [1600.0, 23.0], [1700.0, 29.0], [1800.0, 18.0], [1900.0, 7.0], [2000.0, 9.0], [2100.0, 11.0], [2200.0, 12.0], [2300.0, 17.0], [2400.0, 17.0], [2500.0, 21.0], [2600.0, 17.0], [2700.0, 21.0], [2800.0, 11.0], [2900.0, 8.0], [3000.0, 12.0], [3100.0, 10.0], [3200.0, 10.0], [3300.0, 8.0], [3400.0, 14.0], [3500.0, 7.0], [3700.0, 8.0], [3600.0, 6.0], [3800.0, 6.0], [3900.0, 9.0], [4000.0, 7.0], [4100.0, 10.0], [4200.0, 22.0], [4300.0, 13.0], [4400.0, 7.0], [4500.0, 4.0], [4600.0, 7.0], [4700.0, 10.0], [4800.0, 8.0], [4900.0, 7.0], [5000.0, 9.0], [5100.0, 6.0], [5200.0, 8.0], [5300.0, 9.0], [5400.0, 5.0], [5500.0, 9.0], [5600.0, 7.0], [5700.0, 8.0], [5800.0, 5.0], [5900.0, 3.0], [6000.0, 1.0], [6100.0, 6.0], [6200.0, 4.0], [6300.0, 5.0], [6400.0, 10.0], [6500.0, 1.0], [6600.0, 3.0], [6700.0, 5.0], [6800.0, 7.0], [6900.0, 6.0], [7000.0, 6.0], [7100.0, 2.0], [7400.0, 4.0], [7200.0, 5.0], [7300.0, 3.0], [7500.0, 5.0], [7600.0, 9.0], [7700.0, 15.0], [7800.0, 9.0], [7900.0, 8.0], [8000.0, 4.0], [8100.0, 4.0], [8300.0, 4.0], [8200.0, 2.0], [8500.0, 2.0], [8400.0, 1.0], [8600.0, 2.0], [8900.0, 4.0], [9000.0, 6.0], [9100.0, 7.0], [9200.0, 5.0], [9300.0, 2.0], [9400.0, 6.0], [9500.0, 8.0], [9700.0, 12.0], [9600.0, 9.0], [9800.0, 7.0], [9900.0, 5.0], [10100.0, 8.0], [10000.0, 11.0], [10200.0, 10.0], [10300.0, 5.0], [10400.0, 6.0], [10500.0, 18.0], [10600.0, 33.0], [10700.0, 8.0], [10800.0, 3.0], [11200.0, 5.0], [11000.0, 10.0], [10900.0, 13.0], [11100.0, 20.0], [11400.0, 1.0], [11300.0, 1.0], [11600.0, 2.0], [11500.0, 1.0], [11700.0, 4.0], [11800.0, 3.0], [12100.0, 2.0], [12200.0, 4.0], [12000.0, 1.0], [11900.0, 1.0], [12600.0, 1.0], [12700.0, 1.0], [12800.0, 1.0], [14500.0, 1.0]], "isOverall": false, "label": "HomePageHttpLoadRequest", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 100, "maxX": 14500.0, "title": "Response Time Distribution"}},
        getOptions: function() {
            var granularity = this.data.result.granularity;
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    barWidth: this.data.result.granularity
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " responses for " + label + " were between " + xval + " and " + (xval + granularity) + " ms";
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimeDistribution"), prepareData(data.result.series, $("#choicesResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshResponseTimeDistribution() {
    var infos = responseTimeDistributionInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeDistribution");
        return;
    }
    if (isGraph($("#flotResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var syntheticResponseTimeDistributionInfos = {
        data: {"result": {"minY": 134.0, "minX": 1.0, "ticks": [[0, "Requests having \nresponse time <= 500ms"], [1, "Requests having \nresponse time > 500ms and <= 1,500ms"], [2, "Requests having \nresponse time > 1,500ms"], [3, "Requests in error"]], "maxY": 866.0, "series": [{"data": [], "color": "#9ACD32", "isOverall": false, "label": "Requests having \nresponse time <= 500ms", "isController": false}, {"data": [[1.0, 134.0]], "color": "yellow", "isOverall": false, "label": "Requests having \nresponse time > 500ms and <= 1,500ms", "isController": false}, {"data": [[2.0, 866.0]], "color": "orange", "isOverall": false, "label": "Requests having \nresponse time > 1,500ms", "isController": false}, {"data": [], "color": "#FF6347", "isOverall": false, "label": "Requests in error", "isController": false}], "supportsControllersDiscrimination": false, "maxX": 2.0, "title": "Synthetic Response Times Distribution"}},
        getOptions: function() {
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendSyntheticResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times ranges",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                    tickLength:0,
                    min:-0.5,
                    max:3.5
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    align: "center",
                    barWidth: 0.25,
                    fill:.75
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " " + label;
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            options.xaxis.ticks = data.result.ticks;
            $.plot($("#flotSyntheticResponseTimeDistribution"), prepareData(data.result.series, $("#choicesSyntheticResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshSyntheticResponseTimeDistribution() {
    var infos = syntheticResponseTimeDistributionInfos;
    prepareSeries(infos.data, true);
    if (isGraph($("#flotSyntheticResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerSyntheticResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var activeThreadsOverTimeInfos = {
        data: {"result": {"minY": 280.616, "minX": 1.62737244E12, "maxY": 280.616, "series": [{"data": [[1.62737244E12, 280.616]], "isOverall": false, "label": "PeakLoadThreadGroup", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.62737244E12, "title": "Active Threads Over Time"}},
        getOptions: function() {
            return {
                series: {
                    stack: true,
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 6,
                    show: true,
                    container: '#legendActiveThreadsOverTime'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                selection: {
                    mode: 'xy'
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : At %x there were %y active threads"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesActiveThreadsOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotActiveThreadsOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewActiveThreadsOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Active Threads Over Time
function refreshActiveThreadsOverTime(fixTimestamps) {
    var infos = activeThreadsOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 36000000);
    }
    if(isGraph($("#flotActiveThreadsOverTime"))) {
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesActiveThreadsOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotActiveThreadsOverTime", "#overviewActiveThreadsOverTime");
        $('#footerActiveThreadsOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var timeVsThreadsInfos = {
        data: {"result": {"minY": 786.0, "minX": 1.0, "maxY": 14557.0, "series": [{"data": [[2.0, 7665.0], [3.0, 7653.0], [4.0, 7673.0], [5.0, 7671.0], [6.0, 7680.0], [7.0, 7704.0], [8.0, 7728.0], [9.0, 7716.0], [10.0, 7784.0], [11.0, 7747.0], [12.0, 7739.0], [13.0, 7743.0], [14.0, 7717.0], [15.0, 7741.0], [16.0, 7824.0], [17.0, 7846.0], [18.0, 7860.0], [19.0, 7846.0], [20.0, 7832.0], [21.0, 7844.0], [22.0, 7871.0], [23.0, 7888.0], [24.0, 7922.0], [25.0, 7945.0], [26.0, 8932.0], [27.0, 7964.0], [28.0, 7922.0], [29.0, 7937.0], [30.0, 8038.0], [31.0, 8091.0], [33.0, 8157.0], [32.0, 8184.0], [35.0, 9054.0], [34.0, 8986.0], [37.0, 9044.0], [36.0, 9079.0], [39.0, 9624.0], [38.0, 10540.0], [41.0, 10594.0], [40.0, 10545.0], [43.0, 10260.0], [42.0, 9594.0], [45.0, 9611.0], [44.0, 9592.0], [47.0, 9598.0], [46.0, 9624.0], [49.0, 9666.0], [48.0, 9757.0], [51.0, 11272.0], [50.0, 10429.0], [53.0, 10577.0], [52.0, 10435.0], [55.0, 12292.0], [54.0, 11260.0], [57.0, 10577.0], [56.0, 11999.0], [59.0, 11669.0], [58.0, 10542.0], [61.0, 11150.0], [60.0, 10630.0], [63.0, 10590.0], [62.0, 10503.0], [67.0, 11712.0], [66.0, 11716.0], [65.0, 12779.0], [64.0, 11032.0], [71.0, 10998.0], [70.0, 12696.0], [69.0, 11013.0], [68.0, 11024.0], [75.0, 10958.0], [74.0, 10960.0], [73.0, 10978.0], [72.0, 10992.0], [79.0, 12830.0], [78.0, 11887.0], [77.0, 11208.0], [76.0, 10966.0], [82.0, 6718.5], [81.0, 6191.0], [83.0, 11158.0], [80.0, 11131.0], [85.0, 4551.666666666666], [86.0, 6689.0], [87.0, 11090.0], [84.0, 12200.0], [88.0, 6234.0], [90.0, 6715.5], [91.0, 11145.0], [89.0, 11155.0], [92.0, 3823.25], [95.0, 6272.5], [94.0, 11154.0], [93.0, 11163.0], [97.0, 4649.0], [99.0, 11186.0], [98.0, 11145.0], [96.0, 11121.0], [100.0, 6368.0], [101.0, 6905.5], [102.0, 6309.5], [103.0, 6298.0], [105.0, 6320.5], [106.0, 4962.666666666666], [107.0, 11863.0], [104.0, 11059.0], [108.0, 6438.0], [109.0, 6379.0], [110.0, 6317.0], [111.0, 5016.0], [113.0, 6367.0], [115.0, 10953.0], [114.0, 11183.0], [112.0, 12146.0], [117.0, 5010.0], [119.0, 6354.5], [118.0, 10932.0], [116.0, 11894.0], [121.0, 6293.0], [122.0, 6347.0], [123.0, 4765.333333333334], [120.0, 10984.0], [125.0, 6399.5], [127.0, 6317.5], [126.0, 11661.0], [124.0, 10958.0], [128.0, 6305.0], [129.0, 4930.0], [130.0, 6356.0], [131.0, 6327.0], [134.0, 6701.5], [135.0, 6746.5], [133.0, 10657.0], [132.0, 10597.0], [137.0, 6587.0], [139.0, 4784.666666666666], [143.0, 6353.5], [142.0, 11262.0], [141.0, 10528.0], [140.0, 10427.0], [138.0, 10691.0], [136.0, 10617.0], [144.0, 5183.0], [145.0, 4996.666666666666], [147.0, 6408.0], [148.0, 6406.0], [149.0, 6416.0], [150.0, 6448.5], [151.0, 5051.666666666666], [146.0, 10623.0], [153.0, 6531.0], [154.0, 5088.333333333334], [156.0, 6463.5], [157.0, 6488.5], [158.0, 5106.666666666666], [159.0, 10627.0], [155.0, 10707.0], [152.0, 10639.0], [160.0, 6514.5], [162.0, 6515.5], [163.0, 6547.0], [164.0, 6553.0], [166.0, 6588.0], [167.0, 10634.0], [165.0, 10665.0], [161.0, 10619.0], [168.0, 6559.0], [170.0, 5242.0], [173.0, 6606.0], [172.0, 6587.5], [175.0, 6609.0], [174.0, 10659.0], [171.0, 10860.0], [169.0, 10680.0], [177.0, 5268.333333333334], [179.0, 6611.0], [180.0, 5302.333333333334], [181.0, 6711.5], [183.0, 6516.0], [182.0, 10513.0], [178.0, 10755.0], [176.0, 10665.0], [184.0, 6653.5], [186.0, 6592.5], [188.0, 6607.0], [189.0, 6492.0], [190.0, 6513.5], [191.0, 10443.0], [187.0, 10401.0], [185.0, 10311.0], [192.0, 5262.0], [194.0, 6630.0], [195.0, 6619.0], [199.0, 5430.0], [198.0, 10225.0], [197.0, 10309.0], [196.0, 10196.0], [193.0, 10248.0], [200.0, 6624.5], [201.0, 6618.5], [202.0, 6624.5], [204.0, 5432.0], [205.0, 6605.5], [207.0, 6635.0], [206.0, 6631.0], [203.0, 10272.0], [209.0, 6604.0], [211.0, 4875.0], [212.0, 6604.5], [214.0, 6603.5], [215.0, 6610.5], [213.0, 10052.0], [210.0, 10055.0], [208.0, 10088.0], [216.0, 5502.666666666666], [217.0, 6622.0], [219.0, 6618.0], [220.0, 5531.333333333334], [221.0, 5499.0], [222.0, 6716.0], [223.0, 9904.0], [218.0, 9961.0], [225.0, 5539.333333333334], [224.0, 6623.5], [226.0, 6611.0], [227.0, 5583.666666666666], [229.0, 6640.0], [228.0, 5545.666666666666], [231.0, 6619.5], [230.0, 9826.0], [232.0, 5040.75], [234.0, 5572.333333333334], [235.0, 6620.0], [237.0, 6632.0], [238.0, 6712.0], [239.0, 9743.0], [236.0, 9718.0], [233.0, 9774.0], [240.0, 6632.5], [241.0, 6654.5], [242.0, 6634.5], [243.0, 5632.333333333333], [247.0, 5632.0], [246.0, 9702.0], [245.0, 9658.0], [244.0, 9671.0], [248.0, 5623.0], [250.0, 5668.666666666667], [251.0, 6624.0], [252.0, 5688.333333333333], [254.0, 6626.0], [255.0, 2809.3333333333335], [253.0, 9475.0], [249.0, 9508.0], [258.0, 2335.5], [256.0, 2320.0], [257.0, 9461.0], [259.0, 6647.5], [269.0, 786.0], [268.0, 803.0], [270.0, 5797.333333333333], [271.0, 4932.666666666667], [264.0, 796.5], [260.0, 2344.0], [261.0, 2354.5], [262.0, 6660.0], [263.0, 3925.0], [265.0, 6677.5], [267.0, 2407.0], [266.0, 800.0], [275.0, 3005.0], [276.0, 5820.0], [277.0, 820.0], [278.0, 6686.0], [279.0, 3348.5], [272.0, 9269.0], [274.0, 846.0], [273.0, 790.0], [280.0, 6695.5], [281.0, 3070.0], [284.0, 6708.0], [283.0, 2526.0], [282.0, 836.0], [286.0, 5918.333333333333], [287.0, 9140.0], [285.0, 3103.0], [289.0, 2568.5], [288.0, 3603.4], [290.0, 2608.5], [291.0, 6736.5], [292.0, 5956.333333333333], [293.0, 4390.5], [295.0, 4415.0], [294.0, 807.5], [297.0, 6772.0], [298.0, 6762.5], [299.0, 2644.0], [296.0, 4795.0], [303.0, 795.6666666666666], [302.0, 9044.0], [301.0, 798.5], [316.0, 2868.25], [305.0, 2797.1666666666665], [304.0, 4230.714285714286], [311.0, 1085.0], [306.0, 2730.5], [307.0, 927.0], [308.0, 2114.3333333333335], [309.0, 1000.0], [310.0, 3381.333333333333], [314.0, 2814.5], [315.0, 4697.0], [317.0, 2272.6666666666665], [318.0, 998.0], [313.0, 967.0], [312.0, 877.0], [333.0, 4863.714285714286], [321.0, 4825.0], [320.0, 3300.4], [327.0, 4277.0], [322.0, 2370.6666666666665], [332.0, 1189.0], [323.0, 2177.6666666666665], [324.0, 3170.166666666667], [325.0, 1140.0], [326.0, 3014.5], [328.0, 4691.666666666667], [329.0, 2842.0], [331.0, 1162.5], [330.0, 1159.0], [334.0, 2472.3333333333335], [335.0, 5009.0], [339.0, 4556.666666666667], [337.0, 3758.333333333333], [336.0, 5025.0], [338.0, 4123.833333333333], [342.0, 4681.0], [341.0, 4224.0], [340.0, 1203.5], [343.0, 3389.0], [345.0, 3976.25], [347.0, 4213.75], [346.0, 3658.3333333333335], [348.0, 5217.0], [349.0, 2374.0], [350.0, 3944.666666666667], [351.0, 3249.5], [344.0, 2743.5], [354.0, 2902.0], [353.0, 3388.0], [355.0, 3313.0], [364.0, 5659.0], [365.0, 2756.6666666666665], [367.0, 3378.875], [366.0, 1426.75], [356.0, 3500.25], [357.0, 3263.5], [358.0, 5351.0], [359.0, 2647.0], [360.0, 3809.5], [362.0, 5443.0], [361.0, 1435.0], [363.0, 1593.0], [380.0, 4323.333333333333], [368.0, 5506.0], [370.0, 5541.0], [369.0, 2655.1428571428573], [372.0, 2532.4], [373.0, 4276.333333333333], [375.0, 5247.25], [374.0, 1713.0], [376.0, 4149.0], [378.0, 5668.0], [377.0, 2585.0], [381.0, 3706.5], [382.0, 2685.0], [379.0, 3632.25], [396.0, 3821.0], [385.0, 4810.166666666667], [384.0, 5249.75], [387.0, 4489.25], [390.0, 5115.0], [388.0, 1999.3333333333333], [391.0, 3126.6666666666665], [392.0, 3963.6666666666665], [395.0, 4937.333333333333], [393.0, 5441.5], [399.0, 5378.0], [398.0, 1767.0], [397.0, 2388.3333333333335], [413.0, 3473.3333333333335], [400.0, 5998.0], [406.0, 4357.0], [405.0, 1753.3333333333333], [408.0, 2931.8571428571427], [410.0, 5275.333333333333], [412.0, 3524.4], [403.0, 1937.75], [402.0, 2182.0], [401.0, 5447.5], [415.0, 6206.0], [409.0, 4283.625], [407.0, 3342.0], [428.0, 4041.0], [418.0, 6253.0], [419.0, 5259.666666666667], [421.0, 6315.5], [420.0, 1864.0], [423.0, 6316.0], [417.0, 1824.0], [416.0, 2121.75], [422.0, 4606.5], [425.0, 4078.2], [427.0, 7069.0], [426.0, 2853.0], [430.0, 6415.5], [431.0, 2346.6666666666665], [424.0, 1834.0], [446.0, 6183.000000000001], [433.0, 5467.5], [434.0, 5707.666666666667], [435.0, 2571.5], [437.0, 3612.3333333333335], [439.0, 2449.0], [438.0, 5131.5], [440.0, 4461.0], [443.0, 6601.0], [442.0, 2664.0], [441.0, 4247.0], [447.0, 3234.3333333333335], [445.0, 2547.0], [444.0, 4826.571428571428], [460.0, 4833.75], [450.0, 4030.9999999999995], [451.0, 5190.888888888889], [452.0, 3839.0], [453.0, 4423.0], [454.0, 4867.555555555556], [455.0, 4091.6666666666665], [449.0, 4935.0], [448.0, 4131.833333333333], [456.0, 3619.4], [457.0, 5401.142857142857], [459.0, 5393.0], [458.0, 3314.3333333333335], [461.0, 5666.333333333333], [462.0, 5050.5], [463.0, 4565.333333333333], [464.0, 6958.0], [466.0, 6965.0], [467.0, 5357.0], [468.0, 4593.333333333333], [469.0, 2719.0], [465.0, 4899.0], [1.0, 14557.0]], "isOverall": false, "label": "HomePageHttpLoadRequest", "isController": false}, {"data": [[280.616, 5314.440999999999]], "isOverall": false, "label": "HomePageHttpLoadRequest-Aggregated", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 469.0, "title": "Time VS Threads"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: { noColumns: 2,show: true, container: '#legendTimeVsThreads' },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s: At %x.2 active threads, Average response time was %y.2 ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesTimeVsThreads"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotTimesVsThreads"), dataset, options);
            // setup overview
            $.plot($("#overviewTimesVsThreads"), dataset, prepareOverviewOptions(options));
        }
};

// Time vs threads
function refreshTimeVsThreads(){
    var infos = timeVsThreadsInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTimeVsThreads");
        return;
    }
    if(isGraph($("#flotTimesVsThreads"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTimeVsThreads");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTimesVsThreads", "#overviewTimesVsThreads");
        $('#footerTimeVsThreads .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var bytesThroughputOverTimeInfos = {
        data : {"result": {"minY": 2033.3333333333333, "minX": 1.62737244E12, "maxY": 248466.06666666668, "series": [{"data": [[1.62737244E12, 248466.06666666668]], "isOverall": false, "label": "Bytes received per second", "isController": false}, {"data": [[1.62737244E12, 2033.3333333333333]], "isOverall": false, "label": "Bytes sent per second", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.62737244E12, "title": "Bytes Throughput Over Time"}},
        getOptions : function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity) ,
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Bytes / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendBytesThroughputOverTime'
                },
                selection: {
                    mode: "xy"
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y"
                }
            };
        },
        createGraph : function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesBytesThroughputOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotBytesThroughputOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewBytesThroughputOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Bytes throughput Over Time
function refreshBytesThroughputOverTime(fixTimestamps) {
    var infos = bytesThroughputOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 36000000);
    }
    if(isGraph($("#flotBytesThroughputOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesBytesThroughputOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotBytesThroughputOverTime", "#overviewBytesThroughputOverTime");
        $('#footerBytesThroughputOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimesOverTimeInfos = {
        data: {"result": {"minY": 5314.440999999999, "minX": 1.62737244E12, "maxY": 5314.440999999999, "series": [{"data": [[1.62737244E12, 5314.440999999999]], "isOverall": false, "label": "HomePageHttpLoadRequest", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.62737244E12, "title": "Response Time Over Time"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average response time was %y ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Times Over Time
function refreshResponseTimeOverTime(fixTimestamps) {
    var infos = responseTimesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 36000000);
    }
    if(isGraph($("#flotResponseTimesOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesOverTime", "#overviewResponseTimesOverTime");
        $('#footerResponseTimesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var latenciesOverTimeInfos = {
        data: {"result": {"minY": 5094.855000000005, "minX": 1.62737244E12, "maxY": 5094.855000000005, "series": [{"data": [[1.62737244E12, 5094.855000000005]], "isOverall": false, "label": "HomePageHttpLoadRequest", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.62737244E12, "title": "Latencies Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response latencies in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendLatenciesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average latency was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesLatenciesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotLatenciesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewLatenciesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Latencies Over Time
function refreshLatenciesOverTime(fixTimestamps) {
    var infos = latenciesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyLatenciesOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 36000000);
    }
    if(isGraph($("#flotLatenciesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesLatenciesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotLatenciesOverTime", "#overviewLatenciesOverTime");
        $('#footerLatenciesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var connectTimeOverTimeInfos = {
        data: {"result": {"minY": 38.35799999999991, "minX": 1.62737244E12, "maxY": 38.35799999999991, "series": [{"data": [[1.62737244E12, 38.35799999999991]], "isOverall": false, "label": "HomePageHttpLoadRequest", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.62737244E12, "title": "Connect Time Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getConnectTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average Connect Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendConnectTimeOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average connect time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesConnectTimeOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotConnectTimeOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewConnectTimeOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Connect Time Over Time
function refreshConnectTimeOverTime(fixTimestamps) {
    var infos = connectTimeOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyConnectTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 36000000);
    }
    if(isGraph($("#flotConnectTimeOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesConnectTimeOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotConnectTimeOverTime", "#overviewConnectTimeOverTime");
        $('#footerConnectTimeOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var responseTimePercentilesOverTimeInfos = {
        data: {"result": {"minY": 784.0, "minX": 1.62737244E12, "maxY": 14557.0, "series": [{"data": [[1.62737244E12, 14557.0]], "isOverall": false, "label": "Max", "isController": false}, {"data": [[1.62737244E12, 10638.5]], "isOverall": false, "label": "90th percentile", "isController": false}, {"data": [[1.62737244E12, 12109.83]], "isOverall": false, "label": "99th percentile", "isController": false}, {"data": [[1.62737244E12, 11093.8]], "isOverall": false, "label": "95th percentile", "isController": false}, {"data": [[1.62737244E12, 784.0]], "isOverall": false, "label": "Min", "isController": false}, {"data": [[1.62737244E12, 4314.0]], "isOverall": false, "label": "Median", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.62737244E12, "title": "Response Time Percentiles Over Time (successful requests only)"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Response Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentilesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Response time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentilesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimePercentilesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimePercentilesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Time Percentiles Over Time
function refreshResponseTimePercentilesOverTime(fixTimestamps) {
    var infos = responseTimePercentilesOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 36000000);
    }
    if(isGraph($("#flotResponseTimePercentilesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimePercentilesOverTime", "#overviewResponseTimePercentilesOverTime");
        $('#footerResponseTimePercentilesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var responseTimeVsRequestInfos = {
    data: {"result": {"minY": 1381.0, "minX": 25.0, "maxY": 10972.0, "series": [{"data": [[32.0, 3812.0], [130.0, 2444.5], [35.0, 7476.5], [34.0, 4806.0], [146.0, 1381.0], [37.0, 10972.0], [36.0, 10741.5], [56.0, 9084.5], [83.0, 3302.0], [25.0, 1411.0], [26.0, 6179.0], [27.0, 7784.0], [29.0, 2530.0], [30.0, 2403.0]], "isOverall": false, "label": "Successes", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 146.0, "title": "Response Time Vs Request"}},
    getOptions: function() {
        return {
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Response Time in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: {
                noColumns: 2,
                show: true,
                container: '#legendResponseTimeVsRequest'
            },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median response time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesResponseTimeVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotResponseTimeVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewResponseTimeVsRequest"), dataset, prepareOverviewOptions(options));

    }
};

// Response Time vs Request
function refreshResponseTimeVsRequest() {
    var infos = responseTimeVsRequestInfos;
    prepareSeries(infos.data);
    if (isGraph($("#flotResponseTimeVsRequest"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeVsRequest");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimeVsRequest", "#overviewResponseTimeVsRequest");
        $('#footerResponseRimeVsRequest .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var latenciesVsRequestInfos = {
    data: {"result": {"minY": 1236.0, "minX": 25.0, "maxY": 10750.5, "series": [{"data": [[32.0, 3099.5], [130.0, 2436.5], [35.0, 5057.0], [34.0, 4065.0], [146.0, 1374.0], [37.0, 10750.5], [36.0, 10447.0], [56.0, 8859.5], [83.0, 3297.0], [25.0, 1236.0], [26.0, 5954.5], [27.0, 7556.0], [29.0, 2262.0], [30.0, 2289.5]], "isOverall": false, "label": "Successes", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 146.0, "title": "Latencies Vs Request"}},
    getOptions: function() {
        return{
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Latency in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: { noColumns: 2,show: true, container: '#legendLatencyVsRequest' },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median Latency time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesLatencyVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotLatenciesVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewLatenciesVsRequest"), dataset, prepareOverviewOptions(options));
    }
};

// Latencies vs Request
function refreshLatenciesVsRequest() {
        var infos = latenciesVsRequestInfos;
        prepareSeries(infos.data);
        if(isGraph($("#flotLatenciesVsRequest"))){
            infos.createGraph();
        }else{
            var choiceContainer = $("#choicesLatencyVsRequest");
            createLegend(choiceContainer, infos);
            infos.createGraph();
            setGraphZoomable("#flotLatenciesVsRequest", "#overviewLatenciesVsRequest");
            $('#footerLatenciesVsRequest .legendColorBox > div').each(function(i){
                $(this).clone().prependTo(choiceContainer.find("li").eq(i));
            });
        }
};

var hitsPerSecondInfos = {
        data: {"result": {"minY": 16.666666666666668, "minX": 1.62737244E12, "maxY": 16.666666666666668, "series": [{"data": [[1.62737244E12, 16.666666666666668]], "isOverall": false, "label": "hitsPerSecond", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.62737244E12, "title": "Hits Per Second"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of hits / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendHitsPerSecond"
                },
                selection: {
                    mode : 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y.2 hits/sec"
                }
            };
        },
        createGraph: function createGraph() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesHitsPerSecond"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotHitsPerSecond"), dataset, options);
            // setup overview
            $.plot($("#overviewHitsPerSecond"), dataset, prepareOverviewOptions(options));
        }
};

// Hits per second
function refreshHitsPerSecond(fixTimestamps) {
    var infos = hitsPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 36000000);
    }
    if (isGraph($("#flotHitsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesHitsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotHitsPerSecond", "#overviewHitsPerSecond");
        $('#footerHitsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var codesPerSecondInfos = {
        data: {"result": {"minY": 16.666666666666668, "minX": 1.62737244E12, "maxY": 16.666666666666668, "series": [{"data": [[1.62737244E12, 16.666666666666668]], "isOverall": false, "label": "200", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.62737244E12, "title": "Codes Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendCodesPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "Number of Response Codes %s at %x was %y.2 responses / sec"
                }
            };
        },
    createGraph: function() {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesCodesPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotCodesPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewCodesPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Codes per second
function refreshCodesPerSecond(fixTimestamps) {
    var infos = codesPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 36000000);
    }
    if(isGraph($("#flotCodesPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesCodesPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotCodesPerSecond", "#overviewCodesPerSecond");
        $('#footerCodesPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var transactionsPerSecondInfos = {
        data: {"result": {"minY": 16.666666666666668, "minX": 1.62737244E12, "maxY": 16.666666666666668, "series": [{"data": [[1.62737244E12, 16.666666666666668]], "isOverall": false, "label": "HomePageHttpLoadRequest-success", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.62737244E12, "title": "Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTransactionsPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                }
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTransactionsPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTransactionsPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewTransactionsPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Transactions per second
function refreshTransactionsPerSecond(fixTimestamps) {
    var infos = transactionsPerSecondInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTransactionsPerSecond");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 36000000);
    }
    if(isGraph($("#flotTransactionsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTransactionsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTransactionsPerSecond", "#overviewTransactionsPerSecond");
        $('#footerTransactionsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var totalTPSInfos = {
        data: {"result": {"minY": 16.666666666666668, "minX": 1.62737244E12, "maxY": 16.666666666666668, "series": [{"data": [[1.62737244E12, 16.666666666666668]], "isOverall": false, "label": "Transaction-success", "isController": false}, {"data": [], "isOverall": false, "label": "Transaction-failure", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.62737244E12, "title": "Total Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTotalTPS"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                },
                colors: ["#9ACD32", "#FF6347"]
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTotalTPS"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTotalTPS"), dataset, options);
        // setup overview
        $.plot($("#overviewTotalTPS"), dataset, prepareOverviewOptions(options));
    }
};

// Total Transactions per second
function refreshTotalTPS(fixTimestamps) {
    var infos = totalTPSInfos;
    // We want to ignore seriesFilter
    prepareSeries(infos.data, false, true);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 36000000);
    }
    if(isGraph($("#flotTotalTPS"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTotalTPS");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTotalTPS", "#overviewTotalTPS");
        $('#footerTotalTPS .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

// Collapse the graph matching the specified DOM element depending the collapsed
// status
function collapse(elem, collapsed){
    if(collapsed){
        $(elem).parent().find(".fa-chevron-up").removeClass("fa-chevron-up").addClass("fa-chevron-down");
    } else {
        $(elem).parent().find(".fa-chevron-down").removeClass("fa-chevron-down").addClass("fa-chevron-up");
        if (elem.id == "bodyBytesThroughputOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshBytesThroughputOverTime(true);
            }
            document.location.href="#bytesThroughputOverTime";
        } else if (elem.id == "bodyLatenciesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesOverTime(true);
            }
            document.location.href="#latenciesOverTime";
        } else if (elem.id == "bodyCustomGraph") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCustomGraph(true);
            }
            document.location.href="#responseCustomGraph";
        } else if (elem.id == "bodyConnectTimeOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshConnectTimeOverTime(true);
            }
            document.location.href="#connectTimeOverTime";
        } else if (elem.id == "bodyResponseTimePercentilesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimePercentilesOverTime(true);
            }
            document.location.href="#responseTimePercentilesOverTime";
        } else if (elem.id == "bodyResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeDistribution();
            }
            document.location.href="#responseTimeDistribution" ;
        } else if (elem.id == "bodySyntheticResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshSyntheticResponseTimeDistribution();
            }
            document.location.href="#syntheticResponseTimeDistribution" ;
        } else if (elem.id == "bodyActiveThreadsOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshActiveThreadsOverTime(true);
            }
            document.location.href="#activeThreadsOverTime";
        } else if (elem.id == "bodyTimeVsThreads") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTimeVsThreads();
            }
            document.location.href="#timeVsThreads" ;
        } else if (elem.id == "bodyCodesPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCodesPerSecond(true);
            }
            document.location.href="#codesPerSecond";
        } else if (elem.id == "bodyTransactionsPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTransactionsPerSecond(true);
            }
            document.location.href="#transactionsPerSecond";
        } else if (elem.id == "bodyTotalTPS") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTotalTPS(true);
            }
            document.location.href="#totalTPS";
        } else if (elem.id == "bodyResponseTimeVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeVsRequest();
            }
            document.location.href="#responseTimeVsRequest";
        } else if (elem.id == "bodyLatenciesVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesVsRequest();
            }
            document.location.href="#latencyVsRequest";
        }
    }
}

/*
 * Activates or deactivates all series of the specified graph (represented by id parameter)
 * depending on checked argument.
 */
function toggleAll(id, checked){
    var placeholder = document.getElementById(id);

    var cases = $(placeholder).find(':checkbox');
    cases.prop('checked', checked);
    $(cases).parent().children().children().toggleClass("legend-disabled", !checked);

    var choiceContainer;
    if ( id == "choicesBytesThroughputOverTime"){
        choiceContainer = $("#choicesBytesThroughputOverTime");
        refreshBytesThroughputOverTime(false);
    } else if(id == "choicesResponseTimesOverTime"){
        choiceContainer = $("#choicesResponseTimesOverTime");
        refreshResponseTimeOverTime(false);
    }else if(id == "choicesResponseCustomGraph"){
        choiceContainer = $("#choicesResponseCustomGraph");
        refreshCustomGraph(false);
    } else if ( id == "choicesLatenciesOverTime"){
        choiceContainer = $("#choicesLatenciesOverTime");
        refreshLatenciesOverTime(false);
    } else if ( id == "choicesConnectTimeOverTime"){
        choiceContainer = $("#choicesConnectTimeOverTime");
        refreshConnectTimeOverTime(false);
    } else if ( id == "choicesResponseTimePercentilesOverTime"){
        choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        refreshResponseTimePercentilesOverTime(false);
    } else if ( id == "choicesResponseTimePercentiles"){
        choiceContainer = $("#choicesResponseTimePercentiles");
        refreshResponseTimePercentiles();
    } else if(id == "choicesActiveThreadsOverTime"){
        choiceContainer = $("#choicesActiveThreadsOverTime");
        refreshActiveThreadsOverTime(false);
    } else if ( id == "choicesTimeVsThreads"){
        choiceContainer = $("#choicesTimeVsThreads");
        refreshTimeVsThreads();
    } else if ( id == "choicesSyntheticResponseTimeDistribution"){
        choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        refreshSyntheticResponseTimeDistribution();
    } else if ( id == "choicesResponseTimeDistribution"){
        choiceContainer = $("#choicesResponseTimeDistribution");
        refreshResponseTimeDistribution();
    } else if ( id == "choicesHitsPerSecond"){
        choiceContainer = $("#choicesHitsPerSecond");
        refreshHitsPerSecond(false);
    } else if(id == "choicesCodesPerSecond"){
        choiceContainer = $("#choicesCodesPerSecond");
        refreshCodesPerSecond(false);
    } else if ( id == "choicesTransactionsPerSecond"){
        choiceContainer = $("#choicesTransactionsPerSecond");
        refreshTransactionsPerSecond(false);
    } else if ( id == "choicesTotalTPS"){
        choiceContainer = $("#choicesTotalTPS");
        refreshTotalTPS(false);
    } else if ( id == "choicesResponseTimeVsRequest"){
        choiceContainer = $("#choicesResponseTimeVsRequest");
        refreshResponseTimeVsRequest();
    } else if ( id == "choicesLatencyVsRequest"){
        choiceContainer = $("#choicesLatencyVsRequest");
        refreshLatenciesVsRequest();
    }
    var color = checked ? "black" : "#818181";
    if(choiceContainer != null) {
        choiceContainer.find("label").each(function(){
            this.style.color = color;
        });
    }
}

